{"ast":null,"code":"import axios from \"axios\";\nexport function CreateOrder(setOrders, setOrderId, setUpdate) {\n  const create = async () => {\n    try {\n      //debugger;\n      const response = await axios.post(`${process.env.REACT_APP_BE_URL}/api/orders`);\n      if (response.data) {\n        //orders.push(response.data);\n        setOrders(prevState => [...prevState, response.data]);\n        setOrderId(response.data.id);\n        setUpdate(true);\n      }\n    } catch (error) {\n      console.error('Error creating order:', error);\n    }\n  };\n  return create;\n}\n_c = CreateOrder;\nexport function UpdateOrder(order, orderId, setOrderId, setUpdate, setOrders) {\n  const update = async () => {\n    let options = {\n      \"status\": \"PAID\"\n    };\n    try {\n      debugger;\n      const response = await axios.patch(`${process.env.REACT_APP_BE_URL}/api/orders/${orderId}`, options);\n      const updatedOrder = response.data;\n      const newOrders = orders.map(order => {\n        if (order.id === updatedOrder.id) {\n          order.status = updatedOrder.status;\n        }\n        return order;\n      });\n      order.status = updatedOrder.status;\n      setOrderId(updatedOrder.id);\n      setUpdate(true);\n      setOrders(newOrders);\n    } catch (error) {\n      console.error('Error creating order:', error);\n    }\n\n    /*try {\n        orders.map(order => {\n            if (order.id === updatedOrder.id) {\n                order.status = updatedOrder.status;\n            }\n        });\n         setOrders(orders)\n     } catch (error) {\n        console.error('Error creating order:', error);\n    }*/\n  };\n  return update;\n}\n_c2 = UpdateOrder;\nvar _c, _c2;\n$RefreshReg$(_c, \"CreateOrder\");\n$RefreshReg$(_c2, \"UpdateOrder\");","map":{"version":3,"names":["axios","CreateOrder","setOrders","setOrderId","setUpdate","create","response","post","process","env","REACT_APP_BE_URL","data","prevState","id","error","console","_c","UpdateOrder","order","orderId","update","options","patch","updatedOrder","newOrders","orders","map","status","_c2","$RefreshReg$"],"sources":["/Users/aleksandr/www/solution/frontend/src/components/hooks/Order.js"],"sourcesContent":["import axios from \"axios\";\n\nexport function CreateOrder(setOrders, setOrderId, setUpdate) {\n    const create = async () => {\n        try {\n            //debugger;\n            const response = await axios.post(`${process.env.REACT_APP_BE_URL}/api/orders`);\n            if (response.data) {\n                //orders.push(response.data);\n                setOrders(prevState => [...prevState, response.data]);\n                setOrderId(response.data.id);\n                setUpdate(true);\n            }\n\n        } catch (error) {\n            console.error('Error creating order:', error);\n        }\n    };\n\n    return create;\n}\n\nexport function UpdateOrder(order, orderId, setOrderId, setUpdate, setOrders) {\n    const update = async () => {\n\n        let options = {\n            \"status\": \"PAID\"\n        }\n\n        try {\n            debugger;\n            const response = await axios.patch(`${process.env.REACT_APP_BE_URL}/api/orders/${orderId}`, options);\n            const updatedOrder = response.data;\n            const newOrders = orders.map(order => {\n                if (order.id === updatedOrder.id) {\n                    order.status = updatedOrder.status;\n                }\n                \n                return order;\n            });\n            order.status = updatedOrder.status\n\n            setOrderId(updatedOrder.id);\n            setUpdate(true)\n            setOrders(newOrders)\n        } catch (error) {\n            console.error('Error creating order:', error);\n        }\n\n\n\n        /*try {\n            orders.map(order => {\n                if (order.id === updatedOrder.id) {\n                    order.status = updatedOrder.status;\n                }\n            });\n\n            setOrders(orders)\n\n        } catch (error) {\n            console.error('Error creating order:', error);\n        }*/\n    };\n\n    return update;\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,WAAWA,CAACC,SAAS,EAAEC,UAAU,EAAEC,SAAS,EAAE;EAC1D,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,gBAAiB,aAAY,CAAC;MAC/E,IAAIJ,QAAQ,CAACK,IAAI,EAAE;QACf;QACAT,SAAS,CAACU,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAEN,QAAQ,CAACK,IAAI,CAAC,CAAC;QACrDR,UAAU,CAACG,QAAQ,CAACK,IAAI,CAACE,EAAE,CAAC;QAC5BT,SAAS,CAAC,IAAI,CAAC;MACnB;IAEJ,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EAED,OAAOT,MAAM;AACjB;AAACW,EAAA,GAlBef,WAAW;AAoB3B,OAAO,SAASgB,WAAWA,CAACC,KAAK,EAAEC,OAAO,EAAEhB,UAAU,EAAEC,SAAS,EAAEF,SAAS,EAAE;EAC1E,MAAMkB,MAAM,GAAG,MAAAA,CAAA,KAAY;IAEvB,IAAIC,OAAO,GAAG;MACV,QAAQ,EAAE;IACd,CAAC;IAED,IAAI;MACA;MACA,MAAMf,QAAQ,GAAG,MAAMN,KAAK,CAACsB,KAAK,CAAE,GAAEd,OAAO,CAACC,GAAG,CAACC,gBAAiB,eAAcS,OAAQ,EAAC,EAAEE,OAAO,CAAC;MACpG,MAAME,YAAY,GAAGjB,QAAQ,CAACK,IAAI;MAClC,MAAMa,SAAS,GAAGC,MAAM,CAACC,GAAG,CAACR,KAAK,IAAI;QAClC,IAAIA,KAAK,CAACL,EAAE,KAAKU,YAAY,CAACV,EAAE,EAAE;UAC9BK,KAAK,CAACS,MAAM,GAAGJ,YAAY,CAACI,MAAM;QACtC;QAEA,OAAOT,KAAK;MAChB,CAAC,CAAC;MACFA,KAAK,CAACS,MAAM,GAAGJ,YAAY,CAACI,MAAM;MAElCxB,UAAU,CAACoB,YAAY,CAACV,EAAE,CAAC;MAC3BT,SAAS,CAAC,IAAI,CAAC;MACfF,SAAS,CAACsB,SAAS,CAAC;IACxB,CAAC,CAAC,OAAOV,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;;IAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGI,CAAC;EAED,OAAOM,MAAM;AACjB;AAACQ,GAAA,GA5CeX,WAAW;AAAA,IAAAD,EAAA,EAAAY,GAAA;AAAAC,YAAA,CAAAb,EAAA;AAAAa,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}